# Generated by roxygen2: do not edit by hand

S3method(as.character,ip_address)
S3method(as.character,ip_interface)
S3method(as.character,ip_network)
S3method(as_ip_address,character)
S3method(as_ip_address,ip_interface)
S3method(as_ip_interface,character)
S3method(as_ip_network,character)
S3method(as_ip_network,ip_interface)
S3method(format,ip_address)
S3method(format,ip_interface)
S3method(format,ip_network)
S3method(format,pillar_shaft_ipaddress)
S3method(hostmask,default)
S3method(hostmask,ip_interface)
S3method(hostmask,ip_network)
S3method(ip_interface,default)
S3method(ip_interface,ip_address)
S3method(ip_network,default)
S3method(ip_network,ip_address)
S3method(netmask,default)
S3method(netmask,ip_interface)
S3method(netmask,ip_network)
S3method(prefix_length,default)
S3method(prefix_length,ip_interface)
S3method(prefix_length,ip_network)
S3method(seq,ip_network)
S3method(vec_arith,ip_address)
S3method(vec_arith,ip_interface)
S3method(vec_arith.ip_address,MISSING)
S3method(vec_arith.ip_address,default)
S3method(vec_arith.ip_address,double)
S3method(vec_arith.ip_address,integer)
S3method(vec_arith.ip_address,ip_address)
S3method(vec_arith.ip_address,ip_interface)
S3method(vec_proxy_compare,ip_address)
S3method(vec_proxy_compare,ip_interface)
S3method(vec_proxy_compare,ip_network)
S3method(vec_ptype_abbr,ip_address)
S3method(vec_ptype_abbr,ip_interface)
S3method(vec_ptype_abbr,ip_network)
export("%<<%")
export("%>>%")
export(as_ip_address)
export(as_ip_interface)
export(as_ip_network)
export(binary_to_ip)
export(broadcast_address)
export(bytes_to_ip)
export(collapse_networks)
export(common_network)
export(exclude_networks)
export(extract_6to4)
export(extract_ipv4_mapped)
export(extract_teredo_client)
export(extract_teredo_server)
export(hostmask)
export(hostname_to_ip)
export(hosts)
export(integer_to_ip)
export(ip_address)
export(ip_interface)
export(ip_network)
export(ip_to_binary)
export(ip_to_bytes)
export(ip_to_hostname)
export(ip_to_integer)
export(is_6to4)
export(is_global)
export(is_ip_address)
export(is_ip_interface)
export(is_ip_network)
export(is_ipv4)
export(is_ipv4_mapped)
export(is_ipv6)
export(is_link_local)
export(is_loopback)
export(is_multicast)
export(is_private)
export(is_reserved)
export(is_site_local)
export(is_subnet)
export(is_supernet)
export(is_teredo)
export(is_unspecified)
export(is_within)
export(is_within_any)
export(max_prefix_length)
export(netmask)
export(network_address)
export(num_addresses)
export(overlaps)
export(prefix_length)
export(reverse_pointer)
export(sample_ipv4)
export(sample_ipv6)
export(sample_network)
export(subnets)
export(summarize_address_range)
export(supernet)
export(vec_arith.ip_address)
export(vec_arith.ip_interface)
import(rlang)
import(vctrs)
importFrom(Rcpp,sourceCpp)
useDynLib(ipaddress, .registration = TRUE)
