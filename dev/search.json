[{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ipaddress","title":"Contributing to ipaddress","text":"outlines propose change ipaddress. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to ipaddress","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to ipaddress","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to ipaddress","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"davidchall/ipaddress\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to ipaddress","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to ipaddress","text":"Please note ipaddress project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 David Hall Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"background","dir":"Articles","previous_headings":"IP Addresses","what":"Background","title":"IP Data","text":"IP addresses used facilitate communications computers connected internet. highest level, IP address analogous mailing address. ’s important know two versions Internet Protocol wide usage today. IPv4 stores addresses using 32 bits, provides 4,294,967,296 unique addresses. given rapid growth internet, address space quickly depleted. replacement protocol (known IPv6) stores addresses using 128 bits, provides far greater number unique addresses (sufficient foreseeable future). transition IPv6 currently ongoing, still common see IPv4 addresses. make IP addresses easier humans interpret, usually represented character strings. IPv4 address represented 4 groups decimal numbers 0 255 separated periods (e.g. 192.168.0.1). group corresponds 8 bits. IPv6 address represented 8 groups hexadecimal numbers 0000 ffff separated colons (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334). group corresponds 16 bits. representation can also compressed removing leading zeros replacing consecutive groups zeros double-colon (e.g. 2001:db8:85a3::8a2e:370:7334).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"class-constructor","dir":"Articles","previous_headings":"IP Addresses","what":"Class constructor","title":"IP Data","text":"ip_address() vector constructed character vector human-readable strings. can handle IPv4 IPv6 addresses simultaneously: IP addresses often stored integers convenience, might need encode decode format. ip_to_integer() integer_to_ip() functions provided purpose. recommend reading documentation use, functions can slightly counter-intuitive (due circumventing limitations R integer data type).","code":"ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\")) #> <ip_address[2]> #> [1] 192.168.0.1             2001:db8::8a2e:370:7334"},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"data-storage","dir":"Articles","previous_headings":"IP Addresses","what":"Data storage","title":"IP Data","text":"example looks like ’ve simply stored character vector. However, constructor actually validated input stored native bit representation address. vector displayed, print() method formats value back human-readable character representation. can see action passing invalid address: two main advantages storing IP data native bit representation: data occupy less space memory (80% reduction), Subsequent use much faster, since don’t repeatedly parse character vector.","code":"ip_address(\"255.255.255.256\") #> Warning: Problem on row 1: 255.255.255.256 #> <ip_address[1]> #> [1] <NA>"},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"background-1","dir":"Articles","previous_headings":"IP Networks","what":"Background","title":"IP Data","text":"IP network contiguous range IP addresses (also known IP block). networks important address allocation routing work. size network determined prefix length. indicates many bits reserved (counting left) routing prefix address (.e. start address range). remaining bits available allocation hosts (hosts network share prefix bits). means network larger prefix length actually smaller network. common representation IP network called CIDR notation. shows routing prefix address prefix length, separated forward slash. notation used IPv4 IPv6 networks. example, 192.168.0.0/24 network represents address range 192.168.0.0 192.168.0.255.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"class-constructor-1","dir":"Articles","previous_headings":"IP Networks","what":"Class constructor","title":"IP Data","text":"ip_network() vector constructed character vector CIDR strings. example: IP network host bits set. host bits set, refer specific host network network whole – purpose ip_interface() class (see ). ip_network() constructor enforces rule input validation. input host bits set, warning emitted NA returned. However, can mask host bits using strict = FALSE.","code":"ip_network(c(\"192.168.0.0/24\", \"2001:db8::/48\")) #> <ip_network[2]> #> [1] 192.168.0.0/24 2001:db8::/48 ip_network(\"192.168.0.1/24\") #> Warning: Problem on row 1: 192.168.0.1/24 (host bits set) #> <ip_network[1]> #> [1] <NA>  ip_network(\"192.168.0.1/24\", strict = FALSE) #> <ip_network[1]> #> [1] 192.168.0.0/24"},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"background-2","dir":"Articles","previous_headings":"IP Interfaces","what":"Background","title":"IP Data","text":"’ve learned host addresses grouped networks. Unsurprisingly , people often think IP address within context network (.e. storing pieces information simultaneously). ipaddress package refers concept IP interface. IP interface represented many different ways (e.g. two addresses containing network bits host bits separately). However, common representation CIDR notation .","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"class-constructor-2","dir":"Articles","previous_headings":"IP Interfaces","what":"Class constructor","title":"IP Data","text":"ip_interface() vector constructed character vector CIDR strings, just like ip_network() vector. However, unlike ip_network(), ip_interface() class retains host bits. Since class represents host specific network, functions treat ip_interface() vector like ip_address() vector. exceptions listed help(ip_interface). address network components can extracted using as_ip_address() as_ip_network() functions, respectively.","code":"ip_interface(c(\"192.168.0.1/10\", \"2001:db8:c3::abcd/45\")) #> <ip_interface[2]> #> [1] 192.168.0.1/10       2001:db8:c3::abcd/45 x <- ip_interface(c(\"192.168.0.1/10\", \"2001:db8:c3::abcd/45\"))  as_ip_address(x) #> <ip_address[2]> #> [1] 192.168.0.1       2001:db8:c3::abcd  as_ip_network(x) #> <ip_network[2]> #> [1] 192.128.0.0/10   2001:db8:c0::/45"},{"path":"https://davidchall.github.io/ipaddress/dev/articles/ip-data.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"IP Data","text":"ipaddress package provides ip_address() ip_network() data classes, represent fundamental aspects IP networking. majority functions contained package use classes. ip_interface() class also provided, hybrid class describing specific host specific network. Although functions treat class like ip_address(), constituent address network components can extracted using as_ip_address() as_ip_network(). Summary ipaddress classes","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/articles/recipes.html","id":"addresses-from-integers","dir":"Articles","previous_headings":"","what":"Addresses from integers","title":"Examples and Recipes","text":"Although IPv4 addresses usually displayed human-readable format (e.g. 192.168.0.1), often saved disk integers reduce storage requirements. R unable store entire range IPv4 addresses integer data type, can instead stored numeric data type. details found help(\"ip_to_integer\"). Given , ’s quite possible ’ll receive IPv4 addresses represented integers, ’ll want convert ip_address() vector type. ’s example :","code":"integer_to_ip(c(0, 3232235521, 4294967295)) #> <ip_address[3]> #> [1] 0.0.0.0         192.168.0.1     255.255.255.255"},{"path":"https://davidchall.github.io/ipaddress/dev/articles/recipes.html","id":"networks-from-address-ranges","dir":"Articles","previous_headings":"","what":"Networks from address ranges","title":"Examples and Recipes","text":"multiple equivalent ways represent IP network: start address + prefix length (e.g. CIDR notation) start address + netmask start address + hostmask start address + end address Although ip_network() function can handle first 3 options, use common_network() function final option. Note approach assumes two addresses actually correspond first last addresses network, otherwise expanded network returned (see help(\"common_network\") details).","code":"tibble(   start = ip_address(c(\"192.168.0.0\", \"2001:db8::\")),   end = ip_address(c(\"192.168.0.15\", \"2001:db8::ffff:ffff:ffff\")) ) %>%   mutate(network = common_network(start, end)) #> # A tibble: 2 × 3 #>         start                      end        network #>     <ip_addr>                <ip_addr>     <ip_netwk> #> 1 192.168.0.0             192.168.0.15 192.168.0.0/28 #> 2  2001:db8:: 2001:db8::ffff:ffff:ffff  2001:db8::/80"},{"path":"https://davidchall.github.io/ipaddress/dev/articles/recipes.html","id":"is-an-address-in-a-network","dir":"Articles","previous_headings":"","what":"Is an address in a network?","title":"Examples and Recipes","text":"common task check address within network, ipaddress package provides couple different functions help workflow: is_within() is_within_any(). also provide is_subnet() is_supernet() test network within another network. see functions can used practice, let’s consider couple IP networks: handful addresses: First, ’ll check address networks. need know networks address found ? can using excellent fuzzyjoin package together is_within() function.","code":"my_networks <- tibble(   network = ip_network(c(\"192.168.0.0/16\", \"2001:db8::/32\")),   label = c(\"Private\", \"Documentation\") )  my_networks #> # A tibble: 2 × 2 #>          network label         #>       <ip_netwk> <chr>         #> 1 192.168.0.0/16 Private       #> 2  2001:db8::/32 Documentation my_addresses <- tibble(   address = ip_address(c(\"192.168.100.1\", \"1.2.3.4\", \"2001:db8::8a2e:370:7334\", \"::1\")) ) my_addresses %>%   mutate(in_network = is_within_any(address, my_networks$network)) #> # A tibble: 4 × 2 #>                   address in_network #>                 <ip_addr> <lgl>      #> 1           192.168.100.1 TRUE       #> 2                 1.2.3.4 FALSE      #> 3 2001:db8::8a2e:370:7334 TRUE       #> 4                     ::1 FALSE my_addresses %>%   fuzzyjoin::fuzzy_left_join(my_networks, c(\"address\" = \"network\"), is_within) #> # A tibble: 4 × 3 #>                   address        network label         #>                 <ip_addr>     <ip_netwk> <chr>         #> 1           192.168.100.1 192.168.0.0/16 Private       #> 2                 1.2.3.4             NA NA            #> 3 2001:db8::8a2e:370:7334  2001:db8::/32 Documentation #> 4                     ::1             NA NA"},{"path":"https://davidchall.github.io/ipaddress/dev/articles/recipes.html","id":"randomly-generate-public-addresses","dir":"Articles","previous_headings":"","what":"Randomly generate public addresses","title":"Examples and Recipes","text":"ipaddress provides functions sample specific network (sample_network()) entire address space (sample_ipv4() sample_ipv6()). However, can difficult sample majority address space, excluding certain networks. good example sampling public IPv4 addresses. simplest solution use accept-reject algorithm – sampling entire IPv4 address space rejecting addresses reserved. now sample 10 addresses make sure public addresses.","code":"sample_public <- function(size) {   result <- sample_ipv4(size)    all_public <- FALSE   while (!all_public) {     public <- is_global(result)     n_replace <- sum(!public)      if (n_replace == 0) {       all_public <- TRUE     } else {       result[!public] <- sample_ipv4(n_replace)     }   }    result } tibble(address = sample_public(10)) %>%   mutate(is_public = is_global(address)) #> # A tibble: 10 × 2 #>            address is_public #>          <ip_addr> <lgl>     #>  1  192.227.244.10 TRUE      #>  2 113.117.162.222 TRUE      #>  3  227.233.10.173 TRUE      #>  4  140.154.71.186 TRUE      #>  5   63.151.165.85 TRUE      #>  6   230.186.88.50 TRUE      #>  7  236.200.49.106 TRUE      #>  8   65.153.199.68 TRUE      #>  9  160.149.75.204 TRUE      #> 10   235.187.87.71 TRUE"},{"path":"https://davidchall.github.io/ipaddress/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hall. Author, maintainer.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hall D (2023). ipaddress: Data Analysis IP Addresses Networks. R package version 1.0.2.9000,  https://github.com/davidchall/ipaddress, https://davidchall.github.io/ipaddress/.","code":"@Manual{,   title = {ipaddress: Data Analysis for IP Addresses and Networks},   author = {David Hall},   year = {2023},   note = {R package version 1.0.2.9000,  https://github.com/davidchall/ipaddress},   url = {https://davidchall.github.io/ipaddress/}, }"},{"path":"https://davidchall.github.io/ipaddress/dev/index.html","id":"ipaddress-","dir":"","previous_headings":"","what":"ipaddress","title":"ipaddress","text":"ipaddress provides data classes functions working IP addresses networks. interface inspired Python ipaddress module. key features: Functions generate analyze IP data Full support IPv4 IPv6 address spaces Data stored native bit format reduced memory footprint Calculations written C++ fast performance Compatible tidyverse data visualization IP addresses networks, check ggip package.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ipaddress","text":"Install released version CRAN : Install development version GitHub :","code":"install.packages(\"ipaddress\") # install.packages(\"remotes\") remotes::install_github(\"davidchall/ipaddress\")"},{"path":"https://davidchall.github.io/ipaddress/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"ipaddress","text":"Use ip_address() ip_network() create standalone vectors data frame columns. looks like ’ve simply stored character vector, ’ve actually validated input stored native bit representation. vector displayed, print() method formats value back human-readable character representation. two main advantages storing IP data native bit representation: data occupy less space memory (80% reduction), Subsequent use much faster, since don’t repeatedly parse character vector. Read vignette(\"ip-data\") learn vector classes. demonstration common recipes using ipaddress vectors functions, see vignette(\"recipes\").","code":"library(tibble) library(ipaddress)  address <- ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\")) network <- ip_network(c(\"192.168.100.0/22\", \"2001:db8::/80\"))  tibble(address, network) #> # A tibble: 2 × 2 #>                   address          network #>                 <ip_addr>       <ip_netwk> #> 1             192.168.0.1 192.168.100.0/22 #> 2 2001:db8::8a2e:370:7334    2001:db8::/80"},{"path":"https://davidchall.github.io/ipaddress/dev/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"ipaddress","text":"iptools – well established R package working IP addresses networks. Unfortunately IPv6 support severely limited. Also, addresses networks stored character vectors, must parsed native bit representation every operation. served excellent guide motivation ipaddress. cyberpandas – Python package using IP addresses pandas DataFrame. offers full support IPv6 stores addresses native bit representation. However, “interesting” operations must deserialize address Python ipaddress object, slow. also doesn’t support IP networks. Please note ipaddress project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/address_in_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Network membership of addresses — address_in_network","title":"Network membership of addresses — address_in_network","text":"functions check whether address falls within network. is_within() performs one--one matching addresses networks. is_within_any() checks address falls within networks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/address_in_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network membership of addresses — address_in_network","text":"","code":"is_within(address, network)  is_within_any(address, network)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/address_in_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network membership of addresses — address_in_network","text":"address ip_address vector network ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/address_in_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network membership of addresses — address_in_network","text":"logical vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/address_in_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network membership of addresses — address_in_network","text":"","code":"is_within(ip_address(\"192.168.2.6\"), ip_network(\"192.168.2.0/28\")) #> [1] TRUE  is_within(ip_address(\"192.168.3.6\"), ip_network(\"192.168.2.0/28\")) #> [1] FALSE  is_within_any(ip_address(\"192.168.3.6\"), ip_network(c(\"192.168.2.0/28\", \"192.168.3.0/28\"))) #> [1] TRUE"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/collapse_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse contiguous and overlapping networks — collapse_networks","title":"Collapse contiguous and overlapping networks — collapse_networks","text":"Given vector networks, returns minimal set networks required represent range addresses.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/collapse_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse contiguous and overlapping networks — collapse_networks","text":"","code":"collapse_networks(network)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/collapse_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse contiguous and overlapping networks — collapse_networks","text":"network ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/collapse_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse contiguous and overlapping networks — collapse_networks","text":"ip_network vector (potentially shorter input)","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/collapse_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse contiguous and overlapping networks — collapse_networks","text":"","code":"collapse_networks(ip_network(c(\"192.168.0.0/24\", \"192.168.1.0/24\"))) #> <ip_network[1]> #> [1] 192.168.0.0/23"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/common_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the common network of two addresses — common_network","title":"Find the common network of two addresses — common_network","text":"Returns smallest network contains addresses. can construct network first last addresses. However, address range match network boundaries, result extends beyond original address range. Use summarize_address_range() receive list networks exactly match address range.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/common_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the common network of two addresses — common_network","text":"","code":"common_network(address1, address2)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/common_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the common network of two addresses — common_network","text":"address1 ip_address vector address2 ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/common_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the common network of two addresses — common_network","text":"ip_network vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/common_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the common network of two addresses — common_network","text":"","code":"# address range matches network boundaries common_network(ip_address(\"192.168.0.0\"), ip_address(\"192.168.0.15\")) #> <ip_network[1]> #> [1] 192.168.0.0/28  # address range does not match network boundaries common_network(ip_address(\"192.167.255.255\"), ip_address(\"192.168.0.16\")) #> <ip_network[1]> #> [1] 192.160.0.0/12"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Country-level IP networks — country_networks","title":"Country-level IP networks — country_networks","text":"Retrieve lists IP networks registered specific countries.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country-level IP networks — country_networks","text":"","code":"country_networks(country, ..., collapse = TRUE)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Country-level IP networks — country_networks","text":"https://www.iwik.org/ipcountry/ (updated daily)","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Country-level IP networks — country_networks","text":"country Character vector two-letter country codes (ISO 3166-1 alpha-2) ... dots future extensions must empty. collapse TRUE (default), contiguous networks collapsed. See collapse_networks().","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Country-level IP networks — country_networks","text":"data frame 2 variables: country: character vector network: list ip_network vectors row represents single country associated vector IP networks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Country-level IP networks — country_networks","text":"function requires internet connection download network lists.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/country_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Country-level IP networks — country_networks","text":"","code":"if (FALSE) { country_networks(c(\"GB\", \"US\"))  country_networks(c(\"GB\", \"US\"), collapse = FALSE)  # retrieve networks for a single country country_networks(\"TO\")$networks[[1]]  # expand networks for multiple countries tidyr::unchop(country_networks(c(\"GB\", \"US\")), networks) }"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/exclude_networks.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove networks from others — exclude_networks","title":"Remove networks from others — exclude_networks","text":"exclude_networks() takes lists networks include exclude. calculates address ranges included excluded (similar setdiff()), finally returns minimal set networks needed describe remaining address ranges.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/exclude_networks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove networks from others — exclude_networks","text":"","code":"exclude_networks(include, exclude)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/exclude_networks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove networks from others — exclude_networks","text":"include ip_network vector exclude ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/exclude_networks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove networks from others — exclude_networks","text":"ip_network vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/exclude_networks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove networks from others — exclude_networks","text":"","code":"exclude_networks(ip_network(\"192.0.2.0/28\"), ip_network(\"192.0.2.1/32\")) #> <ip_network[4]> #> [1] 192.0.2.0/32 192.0.2.2/31 192.0.2.4/30 192.0.2.8/29  exclude_networks(ip_network(\"192.0.2.0/28\"), ip_network(\"192.0.2.15/32\")) #> <ip_network[4]> #> [1] 192.0.2.0/29  192.0.2.8/30  192.0.2.12/31 192.0.2.14/32"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv4.html","id":null,"dir":"Reference","previous_headings":"","what":"IPv4 address space allocation — iana_ipv4","title":"IPv4 address space allocation — iana_ipv4","text":"dataset containing registry allocated blocks IPv4 address space.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPv4 address space allocation — iana_ipv4","text":"","code":"iana_ipv4"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IPv4 address space allocation — iana_ipv4","text":"data frame 121 rows 3 variables: network Address block (ip_network vector) allocation three types allocation: reserved managed regional Internet registry (RIR) assigned organization label RIR, organization purpose reservation","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv4.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"IPv4 address space allocation — iana_ipv4","text":"https://www.iana.org/assignments/ipv4-address-space","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv4.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IPv4 address space allocation — iana_ipv4","text":"Last updated 2022-12-12","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPv4 address space allocation — iana_ipv4","text":"","code":"iana_ipv4 #> # A tibble: 121 × 3 #>       network allocation label              #>    <ip_netwk> <fct>      <chr>              #>  1  0.0.0.0/8 Reserved   Reserved           #>  2  1.0.0.0/8 Managed    APNIC              #>  3  2.0.0.0/8 Managed    RIPE NCC           #>  4  3.0.0.0/8 Managed    Various registries #>  5  4.0.0.0/8 Managed    Various registries #>  6  5.0.0.0/8 Managed    RIPE NCC           #>  7  6.0.0.0/8 Assigned   US DoD             #>  8  7.0.0.0/8 Managed    Various registries #>  9  8.0.0.0/7 Managed    Various registries #> 10 10.0.0.0/8 Reserved   Reserved           #> # ℹ 111 more rows"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv6.html","id":null,"dir":"Reference","previous_headings":"","what":"IPv6 address space allocation — iana_ipv6","title":"IPv6 address space allocation — iana_ipv6","text":"dataset containing registry allocated blocks IPv6 address space.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPv6 address space allocation — iana_ipv6","text":"","code":"iana_ipv6"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv6.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IPv6 address space allocation — iana_ipv6","text":"data frame 47 rows 3 variables: network Address block (ip_network vector) allocation two types allocation: reserved managed regional Internet registry (RIR) label RIR purpose reservation","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv6.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"IPv6 address space allocation — iana_ipv6","text":"https://www.iana.org/assignments/ipv6-address-space https://www.iana.org/assignments/ipv6-unicast-address-assignments","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv6.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"IPv6 address space allocation — iana_ipv6","text":"Last updated 2020-08-18","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/iana_ipv6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPv6 address space allocation — iana_ipv6","text":"","code":"iana_ipv6 #> # A tibble: 47 × 3 #>           network allocation label    #>        <ip_netwk> <fct>      <chr>    #>  1          ::/3  Reserved   IETF     #>  2      2001::/23 Managed    IANA     #>  3  2001:200::/23 Managed    APNIC    #>  4  2001:400::/23 Managed    ARIN     #>  5  2001:600::/23 Managed    RIPE NCC #>  6  2001:800::/22 Managed    RIPE NCC #>  7  2001:c00::/22 Managed    APNIC    #>  8 2001:1200::/23 Managed    LACNIC   #>  9 2001:1400::/22 Managed    RIPE NCC #> 10 2001:1800::/23 Managed    ARIN     #> # ℹ 37 more rows"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_address.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of IP addresses — ip_address","title":"Vector of IP addresses — ip_address","text":"Construct vector IP addresses.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of IP addresses — ip_address","text":"","code":"ip_address(x = character())"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of IP addresses — ip_address","text":"x character vector IP addresses, dot-decimal notation (IPv4) hexadecimal notation (IPv6)","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of IP addresses — ip_address","text":"S3 vector class ip_address","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_address.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector of IP addresses — ip_address","text":"address IPv4 space uses 32-bits. usually represented 4 groups 8 bits, shown decimal digits (e.g. 192.168.0.1). known dot-decimal notation. address IPv6 space uses 128-bits. usually represented 8 groups 16 bits, shown hexadecimal digits (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334). representation can also compressed removing leading zeros replacing consecutive groups zeros double-colon (e.g. 2001:db8:85a3::8a2e:370:7334). Finally, also dual representation. expresses final two groups IPv4 address (e.g. 2001:db8:85a3::8a2e:3.112.115.52). ip_address() constructor accepts character vector IP addresses two formats. checks whether string valid IPv4 IPv6 address, converts ip_address object. input invalid, warning emitted NA stored instead. casting ip_address object back character vector using .character(), IPv6 addresses reduced compressed representation. special case IPv4-mapped IPv6 addresses (see is_ipv4_mapped()), returned dual representation (e.g. ::ffff:192.168.0.1). ip_address vectors support number operators.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector of IP addresses — ip_address","text":"","code":"# supports IPv4 and IPv6 simultaneously ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\")) #> <ip_address[2]> #> [1] 192.168.0.1             2001:db8::8a2e:370:7334  # validates inputs and replaces with NA ip_address(c(\"255.255.255.256\", \"192.168.0.1/32\")) #> Warning: Problem on row 1: 255.255.255.256 #> Warning: Problem on row 2: 192.168.0.1/32 #> <ip_address[2]> #> [1] <NA> <NA>"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_cast.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast to IP vector — ip_cast","title":"Cast to IP vector — ip_cast","text":"Methods converting character vectors ip_interface vectors ip_address ip_network vectors.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_cast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast to IP vector — ip_cast","text":"","code":"as_ip_address(x)  as_ip_interface(x)  as_ip_network(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_cast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast to IP vector — ip_cast","text":"x object cast","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_cast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast to IP vector — ip_cast","text":"as_ip_address(): ip_address vector as_ip_network(): ip_network vector as_ip_interface(): ip_interface vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_cast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast to IP vector — ip_cast","text":"","code":"as_ip_address(ip_interface(\"192.168.0.1/10\")) #> <ip_address[1]> #> [1] 192.168.0.1  as_ip_network(ip_interface(\"192.168.0.1/10\")) #> <ip_network[1]> #> [1] 192.128.0.0/10"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format IP vector — ip_format","title":"Format IP vector — ip_format","text":"Format vector IP data using compressed exploded representation.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format IP vector — ip_format","text":"","code":"# S3 method for ip_address format(x, ..., exploded = FALSE)  # S3 method for ip_interface format(x, ..., exploded = FALSE)  # S3 method for ip_network format(x, ..., exploded = FALSE)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format IP vector — ip_format","text":"x object format ... dots future extensions must empty. exploded Logical scalar. IPv6 addresses display leading zeros? (default: FALSE)","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format IP vector — ip_format","text":"character vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format IP vector — ip_format","text":"","code":"format(ip_address(\"2001:db8::8a2e:370:7334\")) #> [1] \"2001:db8::8a2e:370:7334\"  format(ip_address(\"2001:db8::8a2e:370:7334\"), exploded = TRUE) #> [1] \"2001:0db8:0000:0000:0000:8a2e:0370:7334\""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of IP interfaces — ip_interface","title":"Vector of IP interfaces — ip_interface","text":"Construct vector IP interfaces. hybrid class stores host address network .","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_interface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of IP interfaces — ip_interface","text":"","code":"ip_interface(...)  # S3 method for default ip_interface(x = character(), ...)  # S3 method for ip_address ip_interface(address, prefix_length, ...)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_interface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of IP interfaces — ip_interface","text":"... Arguments passed methods. x character vector IP interfaces, CIDR notation (IPv4 IPv6) address ip_address vector prefix_length integer vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_interface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of IP interfaces — ip_interface","text":"S3 vector class ip_interface","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_interface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector of IP interfaces — ip_interface","text":"Constructing ip_interface vector conceptually like constructing ip_network vector, except host bits retained. ip_interface class inherits ip_address class. means can generally used places ip_address vector expected. exceptions rule : support addition subtraction integers support bitwise operations compared ip_address vectors ip_interface class additionally supports functions typically reserved ip_network vectors: prefix_length(), netmask() hostmask(). purposes, can extract address network components using as_ip_address() as_ip_network(). comparing sorting ip_interface vectors, network compared host address.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_interface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector of IP interfaces — ip_interface","text":"","code":"# construct from character vector ip_interface(c(\"192.168.0.1/10\", \"2001:db8:c3::abcd/45\")) #> <ip_interface[2]> #> [1] 192.168.0.1/10       2001:db8:c3::abcd/45  # construct from address + prefix length objects ip_interface(ip_address(c(\"192.168.0.1\", \"2001:db8:c3::abcd\")), c(10L, 45L)) #> <ip_interface[2]> #> [1] 192.168.0.1/10       2001:db8:c3::abcd/45  # extract IP address x <- ip_interface(c(\"192.168.0.1/10\", \"2001:db8:c3::abcd/45\")) as_ip_address(x) #> <ip_address[2]> #> [1] 192.168.0.1       2001:db8:c3::abcd  # extract IP network (with host bits masked) as_ip_network(x) #> <ip_network[2]> #> [1] 192.128.0.0/10   2001:db8:c0::/45"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of IP networks — ip_network","title":"Vector of IP networks — ip_network","text":"Construct vector IP networks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of IP networks — ip_network","text":"","code":"ip_network(...)  # S3 method for default ip_network(x = character(), ..., strict = TRUE)  # S3 method for ip_address ip_network(address, prefix_length, ..., strict = TRUE)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of IP networks — ip_network","text":"... Arguments passed methods. x character vector IP networks, CIDR notation (IPv4 IPv6) strict TRUE (default) input host bits set, warning emitted NA returned. FALSE, host bits set zero valid IP network returned. need retain host bits, consider using ip_interface() instead. address ip_address vector prefix_length integer vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of IP networks — ip_network","text":"S3 vector class ip_network","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector of IP networks — ip_network","text":"IP network corresponds contiguous range IP addresses (also known IP block). CIDR notation represents IP network routing prefix address (denotes start range) prefix length (indicates size range) separated forward slash. example, 192.168.0.0/24 represents addresses 192.168.0.0 192.168.0.255. prefix length indicates number bits reserved routing prefix. means larger prefix lengths indicate smaller networks. maximum prefix length 32 IPv4 128 IPv6. correspond IP network single IP address. ip_network() constructor accepts character vector IP networks CIDR notation. checks whether string valid IPv4 IPv6 network, converts ip_network object. input invalid, warning emitted NA stored instead. alternative constructor accepts ip_address vector integer vector containing network address prefix length, respectively. casting ip_network object back character vector using .character(), IPv6 addresses reduced compressed representation. comparing sorting ip_network vectors, network address compared prefix length.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector of IP networks — ip_network","text":"","code":"# construct from character vector ip_network(c(\"192.168.0.0/24\", \"2001:db8::/48\")) #> <ip_network[2]> #> [1] 192.168.0.0/24 2001:db8::/48   # validates inputs and replaces with NA ip_network(c(\"192.168.0.0/33\", \"192.168.0.0\")) #> Warning: Problem on row 1: 192.168.0.0/33 #> Warning: Problem on row 2: 192.168.0.0 #> <ip_network[2]> #> [1] <NA> <NA>  # IP networks should not have any host bits set ip_network(\"192.168.0.1/22\") #> Warning: Problem on row 1: 192.168.0.1/22 (host bits set) #> <ip_network[1]> #> [1] <NA>  # but we can mask the host bits if desired ip_network(\"192.168.0.1/22\", strict = FALSE) #> <ip_network[1]> #> [1] 192.168.0.0/22  # construct from address + prefix length ip_network(ip_address(\"192.168.0.0\"), 24L) #> <ip_network[1]> #> [1] 192.168.0.0/24  # construct from address + netmask ip_network(ip_address(\"192.168.0.0\"), prefix_length(ip_address(\"255.255.255.0\"))) #> <ip_network[1]> #> [1] 192.168.0.0/24  # construct from address + hostmask ip_network(ip_address(\"192.168.0.0\"), prefix_length(ip_address(\"0.0.0.255\"))) #> <ip_network[1]> #> [1] 192.168.0.0/24"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Operators for IP addresses — ip_operators","title":"Operators for IP addresses — ip_operators","text":"ip_address vectors support following operators: bitwise logic operators: ! (), & (), | (), ^ (XOR) bitwise shift operators: %<<% (left shift), %>>% (right shift) arithmetic operators: + (addition), - (subtraction)","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Operators for IP addresses — ip_operators","text":"","code":"# use ip_to_binary() to understand these examples better  # bitwise NOT !ip_address(\"192.168.0.1\") #> <ip_address[1]> #> [1] 63.87.255.254  # bitwise AND ip_address(\"192.168.0.1\") & ip_address(\"255.0.0.255\") #> <ip_address[1]> #> [1] 192.0.0.1  # bitwise OR ip_address(\"192.168.0.0\") | ip_address(\"255.0.0.255\") #> <ip_address[1]> #> [1] 255.168.0.255  # bitwise XOR ip_address(\"192.168.0.0\") ^ ip_address(\"255.0.0.255\") #> <ip_address[1]> #> [1] 63.168.0.255  # bitwise shift left ip_address(\"192.168.0.1\") %<<% 1 #> <ip_address[1]> #> [1] 129.80.0.2  # bitwise shift right ip_address(\"192.168.0.1\") %>>% 1 #> <ip_address[1]> #> [1] 96.84.0.0  # addition of integers ip_address(\"192.168.0.1\") + 10 #> <ip_address[1]> #> [1] 192.168.0.11  # subtraction of integers ip_address(\"192.168.0.1\") - 10 #> <ip_address[1]> #> [1] 192.167.255.247"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for IP vector — ip_test","title":"Test for IP vector — ip_test","text":"Check object ip_address, ip_network ip_interface vector.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for IP vector — ip_test","text":"","code":"is_ip_address(x)  is_ip_interface(x)  is_ip_network(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for IP vector — ip_test","text":"x object test","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for IP vector — ip_test","text":"logical scalar","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for IP vector — ip_test","text":"","code":"is_ip_address(ip_address(\"192.168.0.1\")) #> [1] TRUE is_ip_interface(ip_interface(\"192.168.0.1/10\")) #> [1] TRUE is_ip_network(ip_network(\"192.168.0.0/24\")) #> [1] TRUE"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent address as binary — ip_to_binary","title":"Represent address as binary — ip_to_binary","text":"Encode decode ip_address binary bit string.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent address as binary — ip_to_binary","text":"","code":"ip_to_binary(x)  binary_to_ip(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent address as binary — ip_to_binary","text":"x ip_to_binary(): ip_address vector binary_to_ip(): character vector containing 0 1 characters","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent address as binary — ip_to_binary","text":"ip_to_binary(): character vector binary_to_ip(): ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_binary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Represent address as binary — ip_to_binary","text":"bits stored network order (also known big-endian order), part IP standard. IPv4 addresses use 32 bits, IPv6 addresses use 128 bits, missing values encoded NA.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent address as binary — ip_to_binary","text":"","code":"x <- ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\", NA)) ip_to_binary(x) #> [1] \"11000000101010000000000000000001\"                                                                                                 #> [2] \"00100000000000010000110110111000000000000000000000000000000000000000000000000000100010100010111000000011011100000111001100110100\" #> [3] NA                                                                                                                                  binary_to_ip(ip_to_binary(x)) #> <ip_address[3]> #> [1] 192.168.0.1             2001:db8::8a2e:370:7334 <NA>"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent address as raw bytes — ip_to_bytes","title":"Represent address as raw bytes — ip_to_bytes","text":"Encode decode ip_address list raw bytes.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent address as raw bytes — ip_to_bytes","text":"","code":"ip_to_bytes(x)  bytes_to_ip(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent address as raw bytes — ip_to_bytes","text":"x ip_to_bytes(): ip_address vector bytes_to_ip(): list raw vectors blob::blob object","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent address as raw bytes — ip_to_bytes","text":"ip_to_bytes(): list raw vectors bytes_to_ip(): ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_bytes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Represent address as raw bytes — ip_to_bytes","text":"bytes stored network order (also known big-endian order), part IP standard. IPv4 addresses use 4 bytes, IPv6 addresses use 16 bytes, missing values encoded NULL.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_bytes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent address as raw bytes — ip_to_bytes","text":"","code":"x <- ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\", NA)) ip_to_bytes(x) #> [[1]] #> [1] c0 a8 00 01 #>  #> [[2]] #>  [1] 20 01 0d b8 00 00 00 00 00 00 8a 2e 03 70 73 34 #>  #> [[3]] #> NULL #>   bytes <- list(   as.raw(c(0xc0, 0xa8, 0x00, 0x01)),   as.raw(c(     0x20, 0x01, 0x0d, 0xb8, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x8a, 0x2e, 0x03, 0x70, 0x73, 0x34   )),   NULL ) bytes_to_ip(bytes) #> <ip_address[3]> #> [1] 192.168.0.1             2001:db8::8a2e:370:7334 <NA>"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent address as hexadecimal — ip_to_hex","title":"Represent address as hexadecimal — ip_to_hex","text":"Encode decode ip_address hexadecimal string.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent address as hexadecimal — ip_to_hex","text":"","code":"ip_to_hex(x)  hex_to_ip(x, is_ipv6 = NULL)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent address as hexadecimal — ip_to_hex","text":"x ip_to_hex(): ip_address vector hex_to_ip(): character vector containing hexadecimal strings is_ipv6 logical vector indicating whether construct IPv4 IPv6 address. NULL (default), IPv4 preferred IPv6 address constructed x large IPv4 address space.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent address as hexadecimal — ip_to_hex","text":"ip_to_hex(): character vector hex_to_ip(): ip_address vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent address as hexadecimal — ip_to_hex","text":"","code":"x <- ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\", NA)) ip_to_hex(x) #> [1] \"0xC0A80001\"                         \"0x20010DB80000000000008A2E03707334\" #> [3] NA                                    hex_to_ip(ip_to_hex(x)) #> <ip_address[3]> #> [1] 192.168.0.1             2001:db8::8a2e:370:7334 <NA>"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hostname.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate address to/from hostname — ip_to_hostname","title":"Translate address to/from hostname — ip_to_hostname","text":"Perform reverse forward DNS resolution. Note: functions significantly slower others ipaddress package.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hostname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate address to/from hostname — ip_to_hostname","text":"","code":"ip_to_hostname(x)  ip_to_hostname_all(x)  hostname_to_ip(x)  hostname_to_ip_all(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hostname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate address to/from hostname — ip_to_hostname","text":"x ip_to_hostname(): ip_address vector hostname_to_ip(): character vector hostnames","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hostname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate address to/from hostname — ip_to_hostname","text":"ip_to_hostname(): character vector ip_to_hostname_all(): list character vectors hostname_to_ip(): ip_address vector hostname_to_ip_all(): list ip_address vectors","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hostname.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate address to/from hostname — ip_to_hostname","text":"functions require internet connection. processing input vector, first check known hostname can resolved. fails, error raised. DNS lookup resolve input, NA returned input. error occurs DNS lookup, warning emitted NA returned input. DNS resolution performs many--many mapping IP addresses hostnames. reason, two versions function. regular version returns just first value _all() suffix version returns values.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_hostname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate address to/from hostname — ip_to_hostname","text":"","code":"if (FALSE) { hostname_to_ip(\"r-project.org\")  ip_to_hostname(hostname_to_ip(\"r-project.org\")) }"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent address as integer — ip_to_integer","title":"Represent address as integer — ip_to_integer","text":"Encode decode ip_address integer.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent address as integer — ip_to_integer","text":"","code":"ip_to_integer(x)  integer_to_ip(x, is_ipv6 = NULL)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent address as integer — ip_to_integer","text":"x ip_to_integer(): ip_address vector integer_to_ip(): bignum::biginteger vector is_ipv6 logical vector indicating whether construct IPv4 IPv6 address. NULL (default), IPv4 preferred IPv6 address constructed x large IPv4 address space.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent address as integer — ip_to_integer","text":"ip_to_integer(): bignum::biginteger vector integer_to_ip(): ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Represent address as integer — ip_to_integer","text":"common represent IP address integer, reinterpreting bit sequence big-endian unsigned integer. means IPv4 IPv6 addresses can represented 32-bit 128-bit unsigned integers. way, IPv4 addresses 0.0.0.0 255.255.255.255 represented 0 4,294,967,295. numeric data types within base R (integer double) insufficient precision cover IPv6 address space. Instead return bignum::biginteger vector, supports arbitrary precision integers.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ip_to_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent address as integer — ip_to_integer","text":"","code":"x <- ip_address(c(\"192.168.0.1\", \"2001:db8::8a2e:370:7334\", NA)) ip_to_integer(x) #> <biginteger[3]> #> [1] 3.232236e+09 4.254077e+37 <NA>          integer_to_ip(ip_to_integer(x)) #> <ip_address[3]> #> [1] 192.168.0.1             2001:db8::8a2e:370:7334 <NA>                     # with IPv4 only, we can use numeric data type as.numeric(ip_to_integer(ip_address(\"192.168.0.1\"))) #> [1] 3232235521  integer_to_ip(3232235521) #> <ip_address[1]> #> [1] 192.168.0.1"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipaddress-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ipaddress: Data Analysis for IP Addresses and Networks — ipaddress-package","title":"ipaddress: Data Analysis for IP Addresses and Networks — ipaddress-package","text":"Classes functions working IP (Internet Protocol) addresses networks, inspired Python 'ipaddress' module. Offers full support IPv4 IPv6 (Internet Protocol versions 4 6) address spaces. specifically designed work well 'tidyverse'.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipaddress-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ipaddress: Data Analysis for IP Addresses and Networks — ipaddress-package","text":"Maintainer: David Hall david.hall.physics@gmail.com (ORCID)","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipaddress-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — ipaddress-vctrs","title":"Internal vctrs methods — ipaddress-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipaddress-vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal vctrs methods — ipaddress-vctrs","text":"","code":"# S3 method for ip_address vec_arith(op, x, y, ...)  # S3 method for ip_interface vec_arith(op, x, y, ...)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipv6-transition.html","id":null,"dir":"Reference","previous_headings":"","what":"IPv6 transition mechanisms — ipv6-transition","title":"IPv6 transition mechanisms — ipv6-transition","text":"multiple mechanisms designed help transition IPv4 IPv6. functions make possible extract embedded IPv4 address IPv6 address.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipv6-transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPv6 transition mechanisms — ipv6-transition","text":"","code":"is_ipv4_mapped(x)  is_6to4(x)  is_teredo(x)  extract_ipv4_mapped(x)  extract_6to4(x)  extract_teredo_server(x)  extract_teredo_client(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipv6-transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPv6 transition mechanisms — ipv6-transition","text":"x ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipv6-transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPv6 transition mechanisms — ipv6-transition","text":"is_xxx(): logical vector extract_xxx(): ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipv6-transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPv6 transition mechanisms — ipv6-transition","text":"IPv6 transition mechanisms described IETF memos: IPv4-mapped: RFC 4291 6to4: RFC 3056 Teredo: RFC 4380","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/ipv6-transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPv6 transition mechanisms — ipv6-transition","text":"","code":"# these examples show the reserved networks is_ipv4_mapped(ip_network(\"::ffff:0.0.0.0/96\")) #> [1] TRUE  is_6to4(ip_network(\"2002::/16\")) #> [1] TRUE  is_teredo(ip_network(\"2001::/32\")) #> [1] TRUE  # these examples show embedded IPv4 addresses extract_ipv4_mapped(ip_address(\"::ffff:192.168.0.1\")) #> <ip_address[1]> #> [1] 192.168.0.1  extract_6to4(ip_address(\"2002:c000:0204::\")) #> <ip_address[1]> #> [1] 192.0.2.4  extract_teredo_server(ip_address(\"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")) #> <ip_address[1]> #> [1] 65.54.227.120  extract_teredo_client(ip_address(\"2001:0000:4136:e378:8000:63bf:3fff:fdd2\")) #> <ip_address[1]> #> [1] 192.0.2.45"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_ipv6.html","id":null,"dir":"Reference","previous_headings":"","what":"Version of the address space — is_ipv6","title":"Version of the address space — is_ipv6","text":"Version address space","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_ipv6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version of the address space — is_ipv6","text":"","code":"is_ipv4(x)  is_ipv6(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_ipv6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Version of the address space — is_ipv6","text":"x ip_address ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_ipv6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version of the address space — is_ipv6","text":"logical vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_ipv6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version of the address space — is_ipv6","text":"","code":"ip <- ip_address(c(\"192.168.0.1\", \"2001:db8::7334\"))  is_ipv4(ip) #> [1]  TRUE FALSE  is_ipv6(ip) #> [1] FALSE  TRUE"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_reserved.html","id":null,"dir":"Reference","previous_headings":"","what":"Reserved addresses — is_reserved","title":"Reserved addresses — is_reserved","text":"functions check address network reserved special use. exception is_global(), checks reserved. network considered reserved network_address() broadcast_address() reserved.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_reserved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reserved addresses — is_reserved","text":"","code":"is_private(x)  is_global(x)  is_multicast(x)  is_unspecified(x)  is_reserved(x)  is_loopback(x)  is_link_local(x)  is_site_local(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_reserved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reserved addresses — is_reserved","text":"x ip_address ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_reserved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reserved addresses — is_reserved","text":"logical vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_reserved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reserved addresses — is_reserved","text":"hyperlinks IANA registries allocated address space: IPv4: allocations, special purpose IPv6: allocations, special purpose","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/is_reserved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reserved addresses — is_reserved","text":"","code":"is_private(ip_network(c(\"192.168.0.0/16\", \"2001:db8::/32\"))) #> [1] TRUE TRUE  is_global(ip_network(c(\"1.0.0.0/8\", \"2002::/32\"))) #> [1] TRUE TRUE  is_multicast(ip_network(c(\"224.0.0.0/4\", \"ff00::/8\"))) #> [1] TRUE TRUE  is_unspecified(ip_network(c(\"0.0.0.0/32\", \"::/128\"))) #> [1] TRUE TRUE  is_reserved(ip_network(c(\"240.0.0.0/4\", \"f000::/5\"))) #> [1] TRUE TRUE  is_loopback(ip_network(c(\"127.0.0.0/8\", \"::1/128\"))) #> [1] TRUE TRUE  is_link_local(ip_network(c(\"169.254.0.0/16\", \"fe80::/10\"))) #> [1] TRUE TRUE  is_site_local(ip_network(\"fec0::/10\")) #> [1] TRUE"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/max_prefix_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of the address space — max_prefix_length","title":"Size of the address space — max_prefix_length","text":"total number bits available address space. IPv4 uses 32-bit addresses IPv6 uses 128-bit addresses.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/max_prefix_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of the address space — max_prefix_length","text":"","code":"max_prefix_length(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/max_prefix_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of the address space — max_prefix_length","text":"x ip_address ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/max_prefix_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of the address space — max_prefix_length","text":"integer vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/max_prefix_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of the address space — max_prefix_length","text":"","code":"x <- ip_address(c(\"192.168.0.1\", \"2001:db8::7334\"))  max_prefix_length(x) #> [1]  32 128"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/netmask.html","id":null,"dir":"Reference","previous_headings":"","what":"Network mask — netmask","title":"Network mask — netmask","text":"prefix_length(), netmask() hostmask() extract different (equivalent) representations network mask. accept ip_network ip_interface vector. functions can also convert alternative representations. example, prefix_length() can infer prefix length ip_address vector netmasks /hostmasks, netmask() hostmask() can accept vector prefix lengths.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/netmask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network mask — netmask","text":"","code":"prefix_length(x)  netmask(x, ...)  # S3 method for numeric netmask(x, is_ipv6 = NULL, ...)  hostmask(x, ...)  # S3 method for numeric hostmask(x, is_ipv6 = NULL, ...)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/netmask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network mask — netmask","text":"x ip_network vector. ip_interface vector. prefix_length(): ip_address vector netmasks /hostmasks. Ambiguous cases (zeros, ones) treated netmasks. netmask() hostmask(): integer vector prefix lengths. ... Arguments passed methods. is_ipv6 logical vector indicating whether construct IPv4 IPv6 address. NULL (default), IPv4 preferred IPv6 address constructed x large IPv4 address space.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/netmask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network mask — netmask","text":"prefix_length(): integer vector netmask(): ip_address vector hostmask(): ip_address vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/netmask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network mask — netmask","text":"","code":"x <- ip_network(c(\"192.168.0.0/22\", \"2001:db00::0/26\"))  prefix_length(x) #> [1] 22 26  netmask(x) #> <ip_address[2]> #> [1] 255.255.252.0 ffff:ffc0::    hostmask(x) #> <ip_address[2]> #> [1] 0.0.3.255                          0:3f:ffff:ffff:ffff:ffff:ffff:ffff  # construct netmask/hostmask from prefix length netmask(c(22L, 26L), c(FALSE, TRUE)) #> <ip_address[2]> #> [1] 255.255.252.0 ffff:ffc0::    hostmask(c(22L, 26L), c(FALSE, TRUE)) #> <ip_address[2]> #> [1] 0.0.3.255                          0:3f:ffff:ffff:ffff:ffff:ffff:ffff  # extract prefix length from netmask/hostmask prefix_length(ip_address(c(\"255.255.255.0\", \"0.255.255.255\"))) #> [1] 24  8  # invalid netmask/hostmask raise a warning and return NA prefix_length(ip_address(\"255.255.255.1\")) #> Warning: Problem on row 1: 255.255.255.1 (invalid netmask/hostmask) #> [1] NA"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_in_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Network membership of other networks — network_in_network","title":"Network membership of other networks — network_in_network","text":"is_supernet() is_subnet() check one network true supernet subnet another network; overlaps() checks overlap two networks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_in_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network membership of other networks — network_in_network","text":"","code":"is_supernet(network, other)  is_subnet(network, other)  overlaps(network, other)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_in_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network membership of other networks — network_in_network","text":"network ip_network vector ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_in_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network membership of other networks — network_in_network","text":"logical vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_in_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network membership of other networks — network_in_network","text":"","code":"net1 <- ip_network(\"192.168.1.128/30\") net2 <- ip_network(\"192.168.1.0/24\")  is_supernet(net1, net2) #> [1] FALSE  is_subnet(net1, net2) #> [1] TRUE  overlaps(net1, net2) #> [1] TRUE"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Network size — network_size","title":"Network size — network_size","text":"network_address() broadcast_address() yield first last addresses network; num_addresses() gives total number addresses network.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network size — network_size","text":"","code":"network_address(x)  broadcast_address(x)  num_addresses(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network size — network_size","text":"x ip_network vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network size — network_size","text":"network_address(): ip_address vector broadcast_address(): ip_address vector num_addresses(): numeric vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network size — network_size","text":"broadcast address special address host connected network can receive messages. , packets sent address received hosts network. IPv4, last address network broadcast address. Although IPv6 follow approach broadcast addresses, broadcast_address() function still returns last address network.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/network_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network size — network_size","text":"","code":"x <- ip_network(c(\"192.168.0.0/22\", \"2001:db8::/33\"))  network_address(x) #> <ip_address[2]> #> [1] 192.168.0.0 2001:db8::   broadcast_address(x) #> <ip_address[2]> #> [1] 192.168.3.255                          #> [2] 2001:db8:7fff:ffff:ffff:ffff:ffff:ffff  num_addresses(x) #> [1] 1.024000e+03 3.961408e+28"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/reverse_pointer.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse DNS pointer — reverse_pointer","title":"Reverse DNS pointer — reverse_pointer","text":"Returns PTR record used reverse DNS.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/reverse_pointer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse DNS pointer — reverse_pointer","text":"","code":"reverse_pointer(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/reverse_pointer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse DNS pointer — reverse_pointer","text":"x ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/reverse_pointer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse DNS pointer — reverse_pointer","text":"character vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/reverse_pointer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse DNS pointer — reverse_pointer","text":"documents describe reverse DNS lookup detail: IPv4: RFC-1035 Section 3.5 IPv6: RFC-3596 Section 2.5","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/reverse_pointer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse DNS pointer — reverse_pointer","text":"","code":"reverse_pointer(ip_address(\"127.0.0.1\")) #> [1] \"1.0.0.127.in-addr.arpa\"  reverse_pointer(ip_address(\"2001:db8::1\")) #> [1] \"1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip.arpa\""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample random addresses — sample","title":"Sample random addresses — sample","text":"sample_ipv4() sample_ipv6() sample entire address space; sample_network() samples specific network.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample random addresses — sample","text":"","code":"sample_ipv4(size, ..., replace = FALSE)  sample_ipv6(size, ..., replace = FALSE)  sample_network(x, size, ..., replace = FALSE)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample random addresses — sample","text":"size Integer specifying number addresses return ... dots future extensions must empty. replace sampling replacement? (default: FALSE) x ip_network scalar","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample random addresses — sample","text":"ip_address vector","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample random addresses — sample","text":"","code":"sample_ipv4(5) #> <ip_address[5]> #> [1] 39.42.182.187  30.152.8.243   69.244.12.141  157.170.66.91  129.78.122.196  sample_ipv6(5) #> <ip_address[5]> #> [1] 11ce:ccf0:20ac:8a99:7db2:c2d5:94bc:53e9 #> [2] 49d2:4d45:d181:baa5:c938:49d6:be7b:34ff #> [3] 4f25:77c7:5d3e:dafd:af6c:8769:eb81:718b #> [4] 1ad0:1a40:f5a0:ea69:3938:606f:4e71:ce7a #> [5] 7cb6:ff93:82f5:ee0:27a5:f33e:a23a:4679   sample_network(ip_network(\"192.168.0.0/16\"), 5) #> <ip_address[5]> #> [1] 192.168.80.178  192.168.202.115 192.168.189.3   192.168.125.192 #> [5] 192.168.9.83     sample_network(ip_network(\"2001:db8::/48\"), 5) #> <ip_address[5]> #> [1] 2001:db8:0:6f29:7aa4:4457:609a:b19f 2001:db8:0:73bd:bdf4:bcc9:bf09:fc6d #> [3] 2001:db8:0:25cf:c704:ba3:731a:9725  2001:db8:0:7f8d:e84f:ad1f:759d:dfb  #> [5] 2001:db8:0:c79c:f329:d9d4:aab5:61d9"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"List addresses within a network — sequence","title":"List addresses within a network — sequence","text":"seq() returns hosts hosts() returns usable hosts","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List addresses within a network — sequence","text":"","code":"# S3 method for ip_network seq(x, ...)  hosts(x)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List addresses within a network — sequence","text":"x ip_network scalar ... dots future extensions must empty.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List addresses within a network — sequence","text":"ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sequence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List addresses within a network — sequence","text":"IPv4, unusable hosts network address broadcast address (.e. first last addresses network). IPv6, unusable host subnet router anycast address (.e. first address network). networks prefix length 31 (IPv4) 127 (IPv6), unusable hosts included results hosts(). ipaddress package support long vectors (.e. vectors 2^31 - 1 elements). result, two functions support networks larger size. corresponds prefix lengths less 2 (IPv4) 98 (IPv6). However, might find machine memory imposes stricter limitations.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List addresses within a network — sequence","text":"","code":"seq(ip_network(\"192.168.0.0/30\")) #> <ip_address[4]> #> [1] 192.168.0.0 192.168.0.1 192.168.0.2 192.168.0.3  seq(ip_network(\"2001:db8::/126\")) #> <ip_address[4]> #> [1] 2001:db8::  2001:db8::1 2001:db8::2 2001:db8::3  hosts(ip_network(\"192.168.0.0/30\")) #> <ip_address[2]> #> [1] 192.168.0.1 192.168.0.2  hosts(ip_network(\"2001:db8::/126\")) #> <ip_address[3]> #> [1] 2001:db8::1 2001:db8::2 2001:db8::3"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/summarize_address_range.html","id":null,"dir":"Reference","previous_headings":"","what":"List constituent networks of an address range — summarize_address_range","title":"List constituent networks of an address range — summarize_address_range","text":"Given address range, returns list constituent networks. know address range matches boundaries single network, might preferable use common_network(). returns ip_network vector instead list ip_network vectors.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/summarize_address_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List constituent networks of an address range — summarize_address_range","text":"","code":"summarize_address_range(address1, address2)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/summarize_address_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List constituent networks of an address range — summarize_address_range","text":"address1 ip_address vector address2 ip_address vector","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/summarize_address_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List constituent networks of an address range — summarize_address_range","text":"list ip_network vectors","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/summarize_address_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List constituent networks of an address range — summarize_address_range","text":"","code":"# address range matches network boundaries summarize_address_range(ip_address(\"192.168.0.0\"), ip_address(\"192.168.0.15\")) #> <list_of<ip_network>[1]> #> [[1]] #> <ip_network[1]> #> [1] 192.168.0.0/28 #>   # address range does not match network boundaries summarize_address_range(ip_address(\"192.167.255.255\"), ip_address(\"192.168.0.16\")) #> <list_of<ip_network>[1]> #> [[1]] #> <ip_network[3]> #> [1] 192.167.255.255/32 192.168.0.0/28     192.168.0.16/32    #>"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/traverse_hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Traverse the network hierarchy — traverse_hierarchy","title":"Traverse the network hierarchy — traverse_hierarchy","text":"functions step network hierarchy. supernet() returns supernetwork containing given network. subnets() returns list subnetworks join make given network.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/traverse_hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traverse the network hierarchy — traverse_hierarchy","text":"","code":"supernet(x, new_prefix = prefix_length(x) - 1L)  subnets(x, new_prefix = prefix_length(x) + 1L)"},{"path":"https://davidchall.github.io/ipaddress/dev/reference/traverse_hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traverse the network hierarchy — traverse_hierarchy","text":"x ip_network vector new_prefix integer vector indicating desired prefix length. default, steps single level hierarchy.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/traverse_hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Traverse the network hierarchy — traverse_hierarchy","text":"supernet(): ip_network vector subnets(): list ip_network vectors","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/reference/traverse_hierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Traverse the network hierarchy — traverse_hierarchy","text":"ipaddress package support long vectors (.e. vectors 2^31 - 1 elements). limits number subnetworks subnets() can return. However, might find machine memory imposes stricter limitations.","code":""},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/reference/traverse_hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Traverse the network hierarchy — traverse_hierarchy","text":"","code":"supernet(ip_network(\"192.168.0.0/24\")) #> <ip_network[1]> #> [1] 192.168.0.0/23  supernet(ip_network(\"192.168.0.0/24\"), new_prefix = 10L) #> <ip_network[1]> #> [1] 192.128.0.0/10  subnets(ip_network(\"192.168.0.0/24\")) #> <list_of<ip_network>[1]> #> [[1]] #> <ip_network[2]> #> [1] 192.168.0.0/25   192.168.0.128/25 #>   subnets(ip_network(\"192.168.0.0/24\"), new_prefix = 27L) #> <list_of<ip_network>[1]> #> [[1]] #> <ip_network[8]> #> [1] 192.168.0.0/27   192.168.0.32/27  192.168.0.64/27  192.168.0.96/27  #> [5] 192.168.0.128/27 192.168.0.160/27 192.168.0.192/27 192.168.0.224/27 #>"},{"path":[]},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-102","dir":"Changelog","previous_headings":"","what":"ipaddress 1.0.2","title":"ipaddress 1.0.2","text":"CRAN release: 2023-12-01 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-101","dir":"Changelog","previous_headings":"","what":"ipaddress 1.0.1","title":"ipaddress 1.0.1","text":"CRAN release: 2023-04-04 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-100","dir":"Changelog","previous_headings":"","what":"ipaddress 1.0.0","title":"ipaddress 1.0.0","text":"CRAN release: 2023-01-12 mark release ipaddress 1.0.0, breaking changes made improve interface data analysis.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ipaddress 1.0.0","text":"ip_to_hostname() hostname_to_ip() now always return one result per input (stored vector). New ip_to_hostname_all() hostname_to_ip_all() return results per input (stored list vectors). subnets() now takes vector input outputs list vectors (#83). strict argument ip_network(). exploded argument format.ip_address(), format.ip_network() format.ip_interface(). replace argument sample_ipv4(), sample_ipv6() sample_network().","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ipaddress 1.0.0","text":"New country_networks() downloads IP networks registered specific countries (#87). Error formatting improved using {cli} (#86).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"minor-improvements-and-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"ipaddress 1.0.0","text":"is_ipv6 argument netmask() hostmask() defaults NULL. option prefers IPv4 mask, creates IPv6 mask fallback. Renamed vignette(\"ipaddress-classes\") vignette(\"ip-data\"). Renamed vignette(\"ipaddress-examples\") vignette(\"recipes\"). Updated iana_ipv4 dataset. Tests now use {testthat} 3e.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-056","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.6","title":"ipaddress 0.5.6","text":"CRAN release: 2022-12-11 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-055","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.5","title":"ipaddress 0.5.5","text":"CRAN release: 2022-08-12 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-054","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.4","title":"ipaddress 0.5.4","text":"CRAN release: 2022-01-11 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-053","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.3","title":"ipaddress 0.5.3","text":"CRAN release: 2021-07-27 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-052","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.2","title":"ipaddress 0.5.2","text":"CRAN release: 2021-06-17 base = \"dec\" still handled ip_to_integer(). base = \"bin\" still handled existing ip_to_binary() function. base = \"hex\" now handled new ip_to_hex() function. BH package longer dependency (C++ Boost headers heavy dependency). bignum package now optional dependency. New ip_to_hex() hex_to_ip() functions encode decode addresses hexadecimal strings.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-051","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.1","title":"ipaddress 0.5.1","text":"CRAN release: 2020-09-12 Addition/subtraction large integers now much faster (#64). Result can still converted using blob::as_blob(). Removes excessive blob package dependency. Package developers can now use LinkingTo: ipaddress without LinkingTo: AsioHeaders.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-050","dir":"Changelog","previous_headings":"","what":"ipaddress 0.5.0","title":"ipaddress 0.5.0","text":"CRAN release: 2020-08-26 release achieves feature parity Python ipaddress module (#46).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ipaddress 0.5.0","text":"Additional checks reserved addresses/networks: is_private(), is_reserved(), is_site_local() (#49). New is_global() checks addresses networks reserved (#49). New collapse_networks() collapses contiguous overlapping networks (#54). New exclude_networks() removes networks others (#59). New reverse_pointer() returns record used reverse DNS (#57). New datasets: iana_ipv4 iana_ipv6 contain registries allocated blocks (#55). New bitwise shift operators: %<<% %>>% (#52). Reorganized C++ code expose IpAddressVector IpNetworkVector classes packages (use LinkingTo: AsioHeaders, ipaddress, Rcpp). affect public R interface (#51).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"minor-improvements-and-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"ipaddress 0.5.0","text":"format.ip_address(), format.ip_network() format.ip_interface() gain exploded parameter display leading zeros IPv6 addresses (#56). ip_to_integer() gains base parameter select decimal, hexadecimal binary outputs (#47). Integer-like doubles now accepted everywhere place integer. Update vignette(\"ipaddress-examples\") use fuzzyjoin package (#61). Update vignette(\"ipaddress-examples\") randomly generate public IP addresses (#62). Fixed comparison ip_address() vectors account machine endianness (#53). ip_network(): network address compared prefix length. ip_interface(): network compared host address.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-040","dir":"Changelog","previous_headings":"","what":"ipaddress 0.4.0","title":"ipaddress 0.4.0","text":"CRAN release: 2020-08-06","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ipaddress 0.4.0","text":"New common_network() function finds smallest network containing two addresses (#39). New summarize_address_range() function lists constituent networks address range (#41). ip_network(ip_address(\"192.0.2.0\"), prefix_length(ip_address(\"255.255.255.0\"))). ip_network(ip_address(\"192.0.2.0\"), prefix_length(ip_address(\"0.0.0.255\"))). New supernet() subnets() functions traversing network hierarchy (#42). Added vignette(\"ipaddress-examples\") describe typical usage patterns (#43).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"minor-improvements-and-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"ipaddress 0.4.0","text":"Check user interrupts processing large data sets. integer_to_ip() now accepts integerish doubles. Addition/subtraction operators now accept integerish doubles. Addition/subtraction operators now catch missing values 2nd argument. netmask() hostmask() now raise error prefix_length is_ipv6 arguments specified (#38). Fix is_within_any() correctly catch IPv6 addresses zero networks. Rename vignette(\"ipaddress\") vignette(\"ipaddress-classes\").","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-030","dir":"Changelog","previous_headings":"","what":"ipaddress 0.3.0","title":"ipaddress 0.3.0","text":"CRAN release: 2020-05-12","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ipaddress 0.3.0","text":"as_packed() from_packed() become ip_to_bytes() bytes_to_ip(). as_binary() from_binary() become ip_to_binary() binary_to_ip(). as_hostname() from_hostname() become ip_to_hostname() hostname_to_ip().","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"ipaddress 0.3.0","text":"New ip_to_integer() integer_to_ip() functions encode decode addresses integers. Note integers contained within character vector. Please see function documentation explanation (#30).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"ipaddress 0.3.0","text":"CIDRs aligned forward slash separator. Prefix length displayed green increase prominence. Dots colons displayed gray reduce prominence. IPv6 addresses can automatically truncated, fit columns console width. Added hex logo. Compatible vctrs 0.3.0 (#31, #34).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-020","dir":"Changelog","previous_headings":"","what":"ipaddress 0.2.0","title":"ipaddress 0.2.0","text":"CRAN release: 2020-03-25","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"classes-0-2-0","dir":"Changelog","previous_headings":"","what":"Classes","title":"ipaddress 0.2.0","text":"Added vignette(\"ipaddress\") introduce data classes provided ipaddress (#24). New ip_interface() class simultaneously store address network (#15). ip_address() vectors now support bitwise operations (!, &, | ^). ip_address() vectors now support addition subtraction integers (#14). Added ip_network() constructor accepts ip_address prefix length vectors (#9).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"other-representations-0-2-0","dir":"Changelog","previous_headings":"","what":"Other representations","title":"ipaddress 0.2.0","text":"New as_packed() from_packed() functions encode decode addresses raw bytes (#13). New as_binary() from_binary() functions encode decode addresses binary strings (#18). New as_hostname() from_hostname() functions translate addresses hostnames (#22).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"address-space-0-2-0","dir":"Changelog","previous_headings":"","what":"Address space","title":"ipaddress 0.2.0","text":"New max_prefix_length() function get size address space (32-bit IPv4 128-bit IPv6). New functions check addresses networks reserved special use: is_multicast(), is_unspecified(), is_loopback(), is_link_local(). is_ipv4_mapped(), is_6to4(), is_teredo(). extract_ipv4_mapped(), extract_6to4(), extract_teredo_server(), extract_teredo_client().","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"network-membership-0-2-0","dir":"Changelog","previous_headings":"","what":"Network membership","title":"ipaddress 0.2.0","text":"New functions size network: num_addresses(), network_address() broadcast_address(). New overlaps() function check overlap networks. ip_network() vector (existing behavior). ip_interface() vector. vector prefix lengths.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"generating-addresses-0-2-0","dir":"Changelog","previous_headings":"","what":"Generating addresses","title":"ipaddress 0.2.0","text":"New seq.ip_network() hosts() functions list addresses within network. New functions randomly sample addresses: sample_ipv4(), sample_ipv6() sample_network() (#11, #19).","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"miscellaneous-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous improvements","title":"ipaddress 0.2.0","text":"Improved input validation warnings. now report row number involved longer mention internal function names. Many functions now support tidy vector recyling. Performance improvements.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-012","dir":"Changelog","previous_headings":"","what":"ipaddress 0.1.2","title":"ipaddress 0.1.2","text":"CRAN release: 2020-03-10 IPv4, affected 0.0.0.128. IPv6, affected address 0:80::/32 network. is_subnet() is_supernet() now check prefix length, ensure true subnet supernet.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-011","dir":"Changelog","previous_headings":"","what":"ipaddress 0.1.1","title":"ipaddress 0.1.1","text":"CRAN release: 2020-03-06 Fix CRAN checks.","code":""},{"path":"https://davidchall.github.io/ipaddress/dev/news/index.html","id":"ipaddress-010","dir":"Changelog","previous_headings":"","what":"ipaddress 0.1.0","title":"ipaddress 0.1.0","text":"CRAN release: 2020-03-05 First CRAN release Full support IPv4 IPv6 address spaces. Efficiently store data native representations (.e. sequence bits). Classes based vctrs package full tidyverse compatibility. is_within() is_within_any() check addresses within networks. is_subnet() is_supernet() check networks within networks. is_ipv4() is_ipv6() classify address space. prefix_length(), netmask() hostmask() yield different representations network mask. Calculations performed C++ (using Rcpp AsioHeaders packages) improved performance.","code":""}]
